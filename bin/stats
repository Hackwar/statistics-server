#!/usr/bin/env php
<?php
/**
 * Joomla! Statistics Server
 *
 * @copyright  Copyright (C) 2013 - 2017 Open Source Matters, Inc. All rights reserved.
 * @license    http://www.gnu.org/licenses/gpl-2.0.txt GNU General Public License Version 2 or Later
 */

require dirname(__DIR__) . '/boot.php';

use Joomla\Application\AbstractApplication;
use Joomla\Application\AbstractCliApplication;
use Joomla\Console\Application;
use Joomla\Database\Service\DatabaseProvider;
use Joomla\DI\Container;
use Joomla\StatsServer\Providers\ConfigServiceProvider;
use Joomla\StatsServer\Providers\ConsoleServiceProvider;
use Joomla\StatsServer\Providers\DatabaseServiceProvider;
use Joomla\StatsServer\Providers\EventServiceProvider;
use Joomla\StatsServer\Providers\FlysystemServiceProvider;
use Joomla\StatsServer\Providers\GitHubServiceProvider;
use Joomla\StatsServer\Providers\MonologServiceProvider;
use Joomla\StatsServer\Providers\WebApplicationServiceProvider;
use Monolog\ErrorHandler;
use Monolog\Logger;
use Psr\Log\LoggerInterface;

$container = (new Container)
	->registerServiceProvider(new ConfigServiceProvider(APPROOT . '/etc/config.json'))
	->registerServiceProvider(new ConsoleServiceProvider)
	->registerServiceProvider(new DatabaseProvider)
	->registerServiceProvider(new DatabaseServiceProvider)
	->registerServiceProvider(new EventServiceProvider)
	->registerServiceProvider(new FlysystemServiceProvider)
	->registerServiceProvider(new GitHubServiceProvider)
	->registerServiceProvider(new MonologServiceProvider)
	->registerServiceProvider(new WebApplicationServiceProvider);

// Alias the CLI application to Joomla's base application class as this is the primary application for the environment
$container->alias(AbstractApplication::class, Application::class);

// Alias the `monolog.logger.cli` service to the Monolog Logger class and PSR-3 interface as this is the primary logger for the environment
$container->alias(Logger::class, 'monolog.logger.cli')
	->alias(LoggerInterface::class, 'monolog.logger.cli');

// Register deprecation logging via Monolog
ErrorHandler::register($container->get(Logger::class), [E_DEPRECATED, E_USER_DEPRECATED], false, false);

// Force error reporting to maximum
error_reporting(-1);
ini_set('display_errors', true);

// Execute the application
try
{
	$container->get(AbstractApplication::class)->execute();
}
catch (\Throwable $e)
{
	fwrite(STDOUT, "\nERROR: " . $e->getMessage() . "\n");
	fwrite(STDOUT, "\n" . $e->getTraceAsString() . "\n");

	if ($prev = $e->getPrevious())
	{
		fwrite(STDOUT, "\n\nPrevious Exception: " . $prev->getMessage() . "\n");
		fwrite(STDOUT, "\n" . $prev->getTraceAsString() . "\n");
	}

	exit(1);
}
